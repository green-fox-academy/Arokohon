Find the title of each film
SELECT title FROM movies;

Find the director of each film
SELECT director FROM movies; 

Find the title and director of each film
SELECT title, director FROM movies; 

Find the title and year of each film
SELECT title, year FROM movies; 

Find all the information about each film
SELECT * FROM movies; 


NEXT

Find the movie with a row id of 6
SELECT id, title FROM movies 
WHERE id = 6;

Find the movies released in the years between 2000 and 2010
SELECT title, year FROM movies
WHERE year BETWEEN 2000 AND 2010;

Find the movies not released in the years between 2000 and 2010
SELECT title, year FROM movies
WHERE year < 2000 OR year > 2010;

Find the first 5 Pixar movies and their release  year
SELECT title, year FROM movies
WHERE year <= 2003;


NEXT

Find all the Toy Story movies
SELECT title, director FROM movies 
WHERE title LIKE "Toy Story%";

Find all the movies directed by John Lasseter
SELECT title, director FROM movies 
WHERE director = "John Lasseter";

Find all the movies (and director) not directed by John Lasseter
SELECT title, director FROM movies 
WHERE director != "John Lasseter";

Find all the WALL-* movies
SELECT * FROM movies 
WHERE title LIKE "WALL-_";


NEXT

List all directors of Pixar movies (alphabetically), without duplicates
SELECT DISTINCT director FROM movies
ORDER BY director ASC;

List the last four Pixar movies released (ordered from most recent to least)
SELECT title, year FROM movies
ORDER BY year DESC
LIMIT 4;

List the first five Pixar movies sorted alphabetically
SELECT title FROM movies
ORDER BY title ASC
LIMIT 5;

List the next five Pixar movies sorted alphabetically
SELECT title FROM movies
ORDER BY title ASC
LIMIT 5 OFFSET 5;


NEXT

List all the Canadian cities and their populations
SELECT city, population FROM north_american_cities
WHERE country = "Canada";

Order all the cities in the United States by their latitude from north to south
SELECT city, latitude FROM north_american_cities
WHERE country = "United States"
ORDER BY latitude DESC;

List all the cities west of Chicago, ordered from west to east
SELECT city, longitude FROM north_american_cities
WHERE longitude < -87.629798
ORDER BY longitude ASC;

List the two largest cities in Mexico (by population)
SELECT city, population FROM north_american_cities
WHERE country LIKE "Mexico"
ORDER BY population DESC 
LIMIT 2;

List the third and fourth largest cities (by population) in the United States and their population
SELECT city, population FROM north_american_cities
WHERE country LIKE "United States"
ORDER BY population DESC
LIMIT 2 OFFSET 2;


NEXT

Find the domestic and international sales for each movie
SELECT title, domestic_sales, international_sales 
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;

Show the sales numbers for each movie that did better internationally rather than domestically
SELECT title, domestic_sales, international_sales
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
WHERE international_sales > domestic_sales;

List all the movies by their ratings in descending order
SELECT title, rating
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
ORDER BY rating DESC;


NEXT

Find the list of all buildings that have employees
SELECT DISTINCT building FROM employees;

Find the list of all buildings and their capacity
SELECT * FROM buildings;

List all buildings and the distinct employee roles in each building (including empty buildings)
SELECT DISTINCT building_name, role 
FROM buildings 
  LEFT JOIN employees
    ON building_name = building;


NEXT

Find the name and role of all employees who have not been assigned to a building
SELECT name, role FROM employees
WHERE building IS NULL;

Find the names of the buildings that hold no employees
SELECT DISTINCT building_name
FROM buildings 
  LEFT JOIN employees
    ON building_name = building
WHERE role IS NULL;


NEXT

List all movies and their combined sales in millions of dollars
SELECT Title, (Domestic_sales + International_sales) / 1000000 AS Total_sales FROM Movies INNER JOIN Boxoffice ON Id = Movie_id;

List all movies and their ratings in percent
SELECT Title, (Rating * 10) AS Percentage_rating FROM Movies INNER JOIN Boxoffice ON Id = Movie_id;

List all movies that were released on even number years
SELECT Title, Year FROM Movies WHERE year % 2 = 0;


NEXT

Find the longest time that an employee has been at the studio
SELECT name,MAX (Years_employed) FROM employees;

For each role, find the average number of years employed by employees in that role
SELECT role, AVG(years_employed) AS Average_years_employed
FROM employees
GROUP BY role;

Find the total number of employee years worked in each building
SELECT DISTINCT Building, SUM (Years_employed) AS Total_years FROM employees GROUP BY building;


NEXT

Find the number of Artists in the studio (without a HAVING clause)
SELECT role, COUNT (*) AS Number_of_artists FROM Employees WHERE role = "Artist";

Find the number of Employees of each role in the studio
SELECT  DISTINCT role, COUNT (*) AS Total_employees FROM Employees GROUP BY role;

Find the total number of years employed by all Engineers
SELECT role, SUM (Years_employed) AS Total_years FROM Employees WHERE role = "Engineer";


NEXT

Find the number of movies each director has directed
SELECT Distinct director, COUNT(title) AS Total_movies FROM movies GROUP BY director;

Find the total domestic and international sales that can be attributed to each director
SELECT Distinct director, SUM(Domestic_sales + International_sales) AS Total_sales FROM movies INNER JOIN Boxoffice WHERE Id = Movie_id GROUP BY director;


NEXT

Add the studio's new production, Toy Story 4 to the list of movies (you can use any director)
INSERT INTO Movies VALUES (4, "Toy Story 4", "John Lasseter", 2002, 92);

Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the  BoxOffice table.
INSERT INTO Boxoffice VALUES (4, 8.7, 340000000, 270000000);


NEXT

The director for A Bug's Life is incorrect, it was actually directed by John Lasseter
UPDATE Movies SET Director = "John Lasseter" WHERE Title = "A Bug's Life";

The year that Toy Story 2 was released is incorrect, it was actually released in 1999
UPDATE Movies SET Year = 1999 WHERE Title = "Toy Story 2";

Both the title and directory for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich
UPDATE Movies SET Title = "Toy Story 3", Director = "Lee Unkrich" WHERE Title = "Toy Story 8";


NEXT

This database is getting too big, lets remove all movies that were released before 2005.
DELETE FROM Movies WHERE Year < 2005;

Andrew Stanton has also left the studio, so please remove all movies directed by him.
DELETE FROM Movies WHERE Director = "Andrew Stanton";


NEXT

Create a new table named Database with the following columns:
– Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
CREATE TABLE Database (Name text, Version float, Download_count INTEGER);


NEXT

Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.
ALTER TABLE Movies ADD Aspect_ratio FLOAT;

Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English.
ALTER TABLE Movies ADD Language TEXT DEFAULT "English";


NEXT

We've sadly reached the end of our lessons, lets clean up by removing the Movies table
DROP TABLE IF EXISTS Movies;

And drop the BoxOffice table as well
DROP TABLE IF EXISTS Boxoffice;







